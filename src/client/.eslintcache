[{"C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\index.js":"1","C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\App.js":"2","C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\components\\Test\\Test.js":"3","C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\components\\Logo.js":"4","C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\components\\Categories.js":"5"},{"size":219,"mtime":1607721787572,"results":"6","hashOfConfig":"7"},{"size":218,"mtime":1607723876716,"results":"8","hashOfConfig":"7"},{"size":836,"mtime":1607721713837,"results":"9","hashOfConfig":"7"},{"size":190,"mtime":1607723636355,"results":"10","hashOfConfig":"7"},{"size":268,"mtime":1607723837723,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10y5mdq",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\index.js",[],"C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\App.js",[],"C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\components\\Test\\Test.js",["22"],"C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\components\\Logo.js",[],"C:\\Users\\mrmas\\Desktop\\DevMuster4\\src\\client\\src\\components\\Categories.js",["23"],{"ruleId":"24","severity":1,"message":"25","line":16,"column":13,"nodeType":"26","endLine":23,"endColumn":4},{"ruleId":"27","severity":2,"message":"28","line":8,"column":10,"nodeType":"29","endLine":8,"endColumn":18},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-undef","'Category' is not defined.","JSXIdentifier"]